
{
    "extends": "./configs/recommended-strict",
    "forbidden": [
        {
            "name": "cli-to-main-only",
            "comment": "cli should only depend on the public interface in main",
            "severity": "error",
            "from": { "path": "(^src/cli)", "pathNot": "^(src/cli/compileConfig/index\\.js)$" },
            "to": { "pathNot": "^src/main|^node_modules|^fs$|^path$|$1|^package.json$" }
        }, {
            "name": "cli-to-main-only-warn",
            "comment": "cli should only depend on the public interface in main (temp exception)",
            "severity": "warn",
            "from": { "path": "^(src/cli/compileConfig/index\\.js)$" },
            "to": { "pathNot": "^src/(cli|main)|^node_modules|^fs$|^path$|$1|^package.json$" }
        }, {
            "name": "bin-to-cli-only",
            "comment": "bin should only depend on cli",
            "severity": "error",
            "from": { "path": "(^bin/dependency-cruise)" },
            "to": { "pathNot": "^src/cli|^node_modules|^package.json$" }
        }, {
            "name": "restrict-fs-access",
            "comment": "restrict file access to a few modules only",
            "severity": "error",
            "from": { "pathNot": "^src/(extract/parse|extract/resolve|extract/gatherInitialSources\\.js|cli)|^test" },
            "to": { "path": "^fs$" }
        }, {
            "name": "no-inter-module-test",
            "severity": "error",
            "from": { "path": "(^test/[^\\/]+/)[^\\.]+\\.spec\\.js" },
            "to": { "path": "^test/[^\\/]+/.+", "pathNot": "utl|$1[^\\.]+\\.json$"}
        }, {
            "name": "prefer-lodash-individuals",
            "comment": "Flag dependencies that include lodash as a whole (better use individual lodash packages e.g. 'lodash/get')",
            "severity": "info",
            "from": {},
            "to": { "path": "lodash\\.js"}
        }, {
            "name": "no-dep-on-test",
            "severity": "error",
            "from": { "path": "^(src|bin)" },
            "to": { "path": "^test|\\.spec\\.js$"}
        }, {
            "name": "no-external-to-here",
            "comment": "you never know...",
            "severity": "info",
            "from": { "pathNot": "^(src|test|bin)" },
            "to": { "path": "^(src|test)" }
        }, {
            "name": "not-to-dev-dep",
            "severity": "error",
            "comment": "because an npm i --production will otherwise deliver an unreliably running module",
            "from": { "path": "^(bin|src)"},
            "to": { "dependencyTypes": ["npm-dev"] }
        }, {
            "name": "optional-deps-used",
            "severity": "error",
            "comment": "we don't work with optional dependencies",
            "from": {},
            "to": { "dependencyTypes": ["npm-optional"] }
        }, {
            "name": "peer-deps-used",
            "comment": "we don't work with peer dependencies",
            "severity": "error",
            "from": {},
            "to": { "dependencyTypes": ["npm-peer"] }
        },{
            "name": "no-unvetted-license",
            "comment": "Warn in case some dependency uses a license that's not vetted (the licenses might be OK, but your legal department might have 2nd thoughts about them)",
            "severity": "warn",
            "from": {},
            "to": { "licenseNot": "MIT|ISC" }
        }
    ],
    "options": {
        /* pattern specifying which files not to follow further when encountered
           (regular expression)
           no need to specify here as well as we use the same as is in the
           recommended preset anyway
         */
        // "doNotFollow": "node_modules",

        /* pattern specifying which files to exclude (regular expression) */
        "exclude" : "fixtures|integration",

        /* list of module systems to cruise */
        // "moduleSystems": ["amd", "cjs", "es6", "tsd"],

        /* prefix for links in html and svg output (e.g. https://github.com/you/yourrepo/blob/develop/) */
        "prefix": "https://github.com/sverweij/dependency-cruiser/blob/develop/"

        /* if true detect dependencies that only exist before typescript-to-javascript compilation */
        // "tsPreCompilationDeps": false,

        /* if true leave symlinks untouched, otherwise use the realpath */
        // "preserveSymlinks": false,

        /* Typescript project file ('tsconfig.json') to use for
           (1) compilation and
           (2) resolution (e.g. with the paths property)

           The (optional) fileName attribute specifies which file to take (relative to dependency-cruiser's
           current working directory. When not provided defaults to './tsconfig.json'.
         */
        // "tsConfig": {
        //    "fileName": "./tsconfig.json"
        // },

        /* Webpack configuration to use to get resolve options from.

          The (optional) fileName attribute specifies which file to take (relative to dependency-cruiser's
          current working directory. When not provided defaults to './webpack.conf.js'.

          The (optional) `env` and `args` attributes contain the parameters to be passed if
          your webpack config is a function and takes them (see webpack documentation
          for details)
         */
        // "webpackConfig": {
        //    "fileName": "./webpack.conf.js",
        //    "env": {},
        //    "args": {}
        // }
    }
}
