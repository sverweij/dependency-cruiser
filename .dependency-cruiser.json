
{
    "extends": "./configs/recommended-strict",
    "forbidden": [
        {
            "name": "cli-to-main-only",
            "comment": "cli should only depend on the public interface in main",
            "severity": "error",
            "from": { "path": "(^src/cli)", "pathNot": "^(src/cli/compileRuleSet/index\\.js)$" },
            "to": { "pathNot": "^src/main|^node_modules|^fs$|^path$|$1|^package.json$" }
        }, {
            "name": "bin-to-cli-only",
            "comment": "bin should only depend on cli",
            "severity": "error",
            "from": { "path": "(^bin/dependency-cruise)" },
            "to": { "pathNot": "^src/cli|^node_modules|^package.json$" }
        }, {
            "name": "restrict-fs-access",
            "comment": "restrict file access to a few modules only",
            "severity": "error",
            "from": { "pathNot": "^src/(extract/parse|extract/resolve|extract/gatherInitialSources\\.js|cli)|^test" },
            "to": { "path": "^fs$" }
        }, {
            "name": "no-inter-module-test",
            "severity": "error",
            "from": { "path": "(^test/[^\\/]+/)[^\\.]+\\.spec\\.js" },
            "to": { "path": "^test/[^\\/]+/.+", "pathNot": "utl|$1[^\\.]+\\.json$"}
        }, {
            "name": "prefer-lodash-individuals",
            "comment": "Flag dependencies that include lodash as a whole (better use individual lodash packages e.g. 'lodash/get')",
            "severity": "info",
            "from": {},
            "to": { "path": "lodash\\.js"}
        }, {
            "name": "no-dep-on-test",
            "severity": "error",
            "from": { "path": "^(src|bin)" },
            "to": { "path": "^test|\\.spec\\.js$"}
        }, {
            "name": "no-external-to-here",
            "comment": "you never know...",
            "severity": "info",
            "from": { "pathNot": "^(src|test|bin)" },
            "to": { "path": "^(src|test)" }
        }, {
            "name": "not-to-dev-dep",
            "severity": "error",
            "comment": "because an npm i --production will otherwise deliver an unreliably running module",
            "from": { "path": "^(bin|src)"},
            "to": { "dependencyTypes": ["npm-dev"] }
        }, {
            "name": "optional-deps-used",
            "severity": "error",
            "comment": "we don't work with optional dependencies",
            "from": {},
            "to": { "dependencyTypes": ["npm-optional"] }
        }, {
            "name": "peer-deps-used",
            "comment": "we don't work with peer dependencies",
            "severity": "error",
            "from": {},
            "to": { "dependencyTypes": ["npm-peer"] }
        },{
            "name": "no-GPL-license",
            "comment": "Warn in case some dependency uses either GPL or APL (the licenses are OK, but your legal department might have 2nd thoughts about them)",
            "severity": "warn",
            "from": {},
            "to": { "license": "GPL|APL" }
        }
    ],
    "options": {
        "exclude": "fixtures",                            /* pattern specifying which files to exclude (regular expression) */
        // "doNotFollow": "node_modules",                 /* pattern specifying which files not to follow further when encountered - already defined in ./configs/recommended to a sane default ('node_modules')*/
        // "moduleSystems": ["amd", "cjs", "es6", "tsd"], /* list of module systems to cruise */
        "prefix": "https://github.com/sverweij/dependency-cruiser/blob/develop/" /* prefix for links in html and svg output */
        // "tsPreCompilationDeps": false,                 /* if true detect dependencies that only exist before typescript-to-javascript compilation */
        // "preserveSymlinks": false,                    /* if true leave symlinks untouched, otherwise use the realpath */
        // "tsConfig": {                                 /* Typescript project file ('tsconfig.json') to use for (1) compilation and (2) resolution (e.g. with the paths property) */
        //    "fileName": "./tsconfig.json"              /* The typescript project file to use. The fileName is relative to dependency-cruiser's current working directory.*/
        //},
        // "webpackConfig": {                            /* Webpack configuration to use to get resolve options from */
        //    "fileName": "./webpack.conf.js" ,           /* The webpack conf file to use (typically something like 'webpack.conf.js'). The fileName is relative to dependency-cruiser's current working directory. When not provided defaults to './webpack.conf.js'. */
        //    "env": {},                                 /* Environment to pass if your config file returns a function */
        //    "args": {}                                 /* Arguments to pass if your config file returns a function. E.g. {mode: 'production'} if you want to use webpack 4's 'mode' feature */
        //}
    }
}
