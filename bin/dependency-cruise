#!/usr/bin/env node
"use strict";

const program    = require("commander");
const semver     = require("semver");
const processCLI = require("../src/cli");
const $package   = require("../package.json");

/* istanbul ignore if  */
if (!semver.satisfies(process.versions.node, $package.engines.node)) {
    process.stderr.write(`\nERROR: your node version (${process.versions.node}) is not recent enough.\n`);
    process.stderr.write(`       dependency-cruiser needs a version of node ${$package.engines.node}\n\n`);

    /* eslint no-process-exit: 0 */
    process.exit(-1);
}

program
    .version($package.version)
    .option("-i, --info", `shows what languages and extensions
                              dependency-cruiser supports`)
    .option("-v, --validate [file]", `validate with rules in [file]
                              (default: .dependency-cruiser.json)`)
    .option("-f, --output-to <file>", `file to write output to; - for stdout
                              (default: -)`)
    .option("-X, --do-not-follow <regex>", `a regular expression for modules to include,
                              but not follow further`)
    .option("-x, --exclude <regex>", "a regular expression for excluding modules")
    .option("-d, --max-depth <n>", `the maximum depth to cruise; 0 <= n <= 99
                              (default: 0, which means 'infinite depth')`)
    .option("-M, --module-systems <items>", `list of module systems (default: amd,cjs,es6)`)
    .option("--system <items>", `deprecated. use -M/ --module-systems instead`)
    .option("-T, --output-type <type>", `output type - html|dot|err|json
                              (default: err)`)
    .option("-P, --prefix <prefix>", "prefix to use for links in the svg reporter")
    .option("--init", `write a .dependency-cruiser.json with basic
                              validations to the current folder.`)
    .arguments("<files-or-directories>")
    .parse(process.argv);

if (Boolean(program.args[0]) || program.info || program.initRules) {
    processCLI(
        program.args,
        program
    );
} else {
    program.help();
}
