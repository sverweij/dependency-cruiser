{
  "title": "dependency-cruiser baseline ('known errors') format",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://dependency-cruiser.js.org/schema/baseline-violations.schema.json",
  "$ref": "#/definitions/ViolationsType",
  "definitions": {
    "ViolationsType": {
      "type": "array",
      "description": "A list of violations found in the dependencies. The dependencies themselves also contain this information, this summary is here for convenience.",
      "items": { "$ref": "#/definitions/ViolationType" }
    },
    "ViolationType": {
      "type": "object",
      "required": ["from", "to", "rule"],
      "additionalProperties": false,
      "properties": {
        "from": { "type": "string" },
        "to": { "type": "string" },
        "type": { "$ref": "#/definitions/ViolationTypeType" },
        "rule": { "$ref": "#/definitions/RuleSummaryType" },
        "cycle": {
          "type": "array",
          "items": { "type": "string" },
          "description": "The circular path if the violation is about circularity"
        },
        "via": {
          "type": "array",
          "items": { "type": "string" },
          "description": "The path from the from to the to if the violation is transitive"
        },
        "metrics": {
          "type": "object",
          "required": ["from", "to"],
          "additionalProperties": false,
          "properties": {
            "from": {
              "type": "object",
              "required": ["instability"],
              "additionalProperties": false,
              "properties": { "instability": { "type": "number" } }
            },
            "to": {
              "type": "object",
              "required": ["instability"],
              "additionalProperties": false,
              "properties": { "instability": { "type": "number" } }
            }
          }
        },
        "comment": {
          "type": "string",
          "description": "Free format text you can e.g. use to explain why this violation can be ignored or is quarantined (only used in _known-violations_) "
        }
      }
    },
    "RuleSummaryType": {
      "type": "object",
      "description": "If there was a rule violation (valid === false), this object contains the name of the rule and severity of violating it.",
      "required": ["name", "severity"],
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The (short, eslint style) name of the violated rule. Typically something like 'no-core-punycode' or 'no-outside-deps'."
        },
        "severity": { "$ref": "#/definitions/SeverityType" }
      }
    },
    "SeverityType": {
      "type": "string",
      "description": "How severe a violation of a rule is. The 'error' severity will make some reporters return a non-zero exit code, so if you want e.g. a build to stop when there's a rule violated: use that.",
      "enum": ["error", "warn", "info", "ignore"]
    },
    "ViolationTypeType": {
      "type": "string",
      "enum": [
        "dependency",
        "module",
        "reachability",
        "cycle",
        "instability",
        "folder"
      ]
    }
  }
}
