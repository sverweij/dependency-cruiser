{
    "forbidden": [{
        "name": "no-circular",
        "severity": "warn",
        "comment": "Warn in case there's circular dependencies",
        "from": {},
        "to": { "circular": true }
    },{
        "name": "no-orphans",
        "severity": "info",
        "comment": "Inform in case there's orphans hiding in the code base",
        "from": { "orphan": true, "pathNot": "\\.d\\.ts$" },
        "to": {}
    },{
        "name": "no-deprecated-core",
        "comment": "Warn about dependencies on deprecated core modules.",
        "severity": "warn",
        "from": {},
        "to": { "dependencyTypes": ["core"], "path": "^(punycode|domain|constants|sys|_linklist)$" }
    },{
        "name": "no-deprecated-npm",
        "comment": "These npm modules are deprecated - find an alternative.",
        "severity": "warn",
        "from": {},
        "to": { "dependencyTypes": ["deprecated"] }
    },{
        "name": "no-non-package-json",
        "severity": "error",
        "comment": "Don't allow dependencies to packages not in package.json",
        "from": {},
        "to": { "dependencyTypes": ["unknown", "undetermined", "npm-no-pkg", "npm-unknown"] }
    },{
        "name": "not-to-unresolvable",
        "comment": "Don't allow dependencies on modules dependency-cruiser can't resolve to files on disk (which probably means they don't exist)",
        "severity": "error",
        "from": {},
        "to": { "couldNotResolve": true }
    },{
        "name": "no-duplicate-dep-types",
        "comment": "Warn if a dependency you're actually using occurs in your package.json more than once (technically: has more than one dependency type)",
        "severity": "warn",
        "from": {},
        "to": { "moreThanOneDependencyType": true }
    },{
        "name": "not-to-test",
        "comment": "Don't allow dependencies from outside the test folder to test",
        "severity": "error",
        "from": { "pathNot": "^(test|spec)" },
        "to": { "path": "^(test|spec)" }
    },{
        "name": "not-to-spec",
        "comment": "Don't allow dependencies to (typescript/ javascript/ coffeescript) spec files",
        "severity": "error",
        "from": {},
        "to": { "path": "\\.spec\\.(js|ts|ls|coffee|litcoffee|coffee\\.md)$" }
    },{
        "name": "not-to-dev-dep",
        "severity": "error",
        "comment": "Don't allow dependencies from src/app/lib to a development only package",
        "from": { "path": "^(src|app|lib)", "pathNot": "\\.spec\\.(js|ts|ls|coffee|litcoffee|coffee\\.md)$" },
        "to": { "dependencyTypes": ["npm-dev"] }
    },{
        "name": "optional-deps-used",
        "severity": "info",
        "comment": "Warn when using an optional dependency - which might not be wrong - but it's not typicaly either",
        "from": {},
        "to": { "dependencyTypes": ["npm-optional"] }
    },{
        "name": "peer-deps-used",
        "comment": "Warn when using a peer dependency - which might not be wrong - but it's not typicaly either",
        "severity": "warn",
        "from": {},
        "to": { "dependencyTypes": ["npm-peer"] }
    }],
    "options": {
        "doNotFollow": "node_modules"                    /* pattern specifying which files not to follow further when encountered*/
        // "exclude" : "",                               /* pattern specifying which files to exclude (regular expression) */
        // "moduleSystems": ["amd", "cjs", "es6", "tsd"],/* list of module systems to cruise */
        // "prefix": "",                                 /* prefix for links in html and svg output (e.g. https://github.com/you/yourrepo/blob/develop/) */
        // "tsPreCompilationDeps": false,                /* if true detect dependencies that only exist before typescript-to-javascript compilation */
        // "preserveSymlinks": false,                    /* if true leave symlinks untouched, otherwise use the realpath */
        // "tsConfig": {                                 /* Typescript project file ('tsconfig.json') to use for (1) compilation and (2) resolution (e.g. with the paths property) */
        //    "fileName": "./tsconfig.json"              /* The typescript project file to use. The fileName is relative to dependency-cruiser's current working directory. When not provided defaults to './tsconfig.json'.*/
        //},
        // "webpackConfig": {                            /* Webpack configuration to use to get resolve options from */
        //    "fileName": "./webpack.conf.js",           /* The webpack conf file to use (typically something like 'webpack.conf.js'). The fileName is relative to dependency-cruiser's current working directory. When not provided defaults to './webpack.conf.js'. */
        //    "env": {},                                 /* Environment to pass if your config file returns a function */
        //    "args": {}                                 /* Arguments to pass if your config file returns a function. E.g. {mode: 'production'} if you want to use webpack 4's 'mode' feature */
        //}
    }
}
